{"version":3,"sources":["JsonRpcWebSocket.js"],"names":[],"mappings":"u2FAAA;;;MAKM,CAAA,gB,0BACL,WAAY,CAAZ,CAAiB,oDACV,CADU,CACL,aADK,EAGhB,EAAK,gBAAL,CAAwB,EAHR,CAIhB,EAAK,qBAAL,CAA6B,EAJb,CAKhB,EAAK,iBAAL,CAAyB,EALT,CAMhB,EAAK,UAAL,CAAkB,CANF,CAQhB,EAAK,gBAAL,CAAsB,SAAtB,CAAiC,SAAC,CAAD,CAAO,CACvC,GAAqB,QAAjB,QAAO,CAAA,CAAC,CAAC,IAAb,CAEC,WADA,GAAK,KAAL,CAAW,IAAX,CAAiB,wBAAjB,CACA,CAGD,GAAI,CAAA,CAAI,CAAG,CAAC,CAAC,IAAb,CACA,GAAI,CACH,CAAI,CAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CACP,CAAC,MAAO,CAAP,CAAW,CAGZ,MAFA,CAAA,OAAO,CAAC,KAAR,CAAc,CAAd,CAEA,KADA,GAAK,KAAL,CAAW,IAAX,CAAiB,oBAAjB,CAEA,CAbsC,GAenC,CAAA,CAAS,CAAyB,QAAtB,QAAO,CAAA,CAAI,CAAC,MAfW,CAgBnC,CAAU,CAAqB,WAAlB,QAAO,CAAA,CAAI,CAAC,EAAZ,GAAwD,WAAtB,QAAO,CAAA,CAAI,CAAC,MAAZ,EAA0D,QAArB,UAAO,CAAI,CAAC,KAAZ,CAAvE,CAhBsB,CAkBvC;AACA,GAAqB,KAAjB,GAAA,CAAI,CAAC,OAAL,EAA2B,CAAC,CAAD,EAAc,CAAC,CAA9C,CACC,MAAO,GAAK,UAAL,CAAgB,CAAI,CAAC,EAAL,EAAW,IAA3B,CAAiC,CAAC,KAAlC,CAAyC,iBAAzC,CAAP,CAGD,GAAI,CAAJ,EACC,GAAsB,WAAlB,QAAO,CAAA,CAAI,CAAC,EAAhB,CAAmC,CAClC;AACA,GAAI,CAAA,CAAO,CAAG,EAAK,gBAAL,CAAsB,CAAI,CAAC,MAA3B,CAAd,CACA,GAAsB,UAAlB,QAAO,CAAA,CAAX,CACC,MAAO,GAAK,UAAL,CAAgB,CAAI,CAAC,EAArB,CAAyB,CAAC,KAA1B,CAAiC,kBAAjC,CAAP,CAGD;AACA,CAAO,CAAC,CAAI,CAAC,MAAN,CAAc,SAAC,CAAD,CAAM,CAAN,CAAiB,CACrC,IAAI,CAAJ,CAOC,EAAK,aAAL,CAAmB,CAAI,CAAC,EAAxB,CAA4B,CAA5B,CAPD,KACC,IAAI,CAAG,WAAY,CAAA,QAAnB,CACC,EAAK,UAAL,CAAgB,CAAI,CAAC,EAArB,CAAyB,CAAG,CAAC,IAA7B,CAAmC,CAAG,CAAC,OAAvC,CAAgD,CAAG,CAAC,IAApD,CADD,KAGC,MAAM,CAAA,CAKR,CAVM,CAWP,CAnBD,IAmBO,CACN;AACA,GAAI,CAAA,CAAO,CAAG,EAAK,qBAAL,CAA2B,CAAI,CAAC,MAAhC,CAAd,CACA,GAAsB,UAAlB,QAAO,CAAA,CAAX,CACC,MAAO,GAAK,UAAL,CAAgB,IAAhB,CAAsB,CAAC,KAAvB,CAA8B,kBAA9B,CAAP,CAGD;AACA,CAAO,CAAC,CAAI,CAAC,MAAN,CACP,CA7BF,KA8BO,IAAI,CAAU,EAAgB,IAAZ,GAAA,CAAI,CAAC,EAAvB,CAAoC,CAC1C,GAAI,CAAA,CAAO,CAAG,EAAK,iBAAL,CAAuB,CAAI,CAAC,EAA5B,CAAd,CACA,GAAsB,UAAlB,QAAO,CAAA,CAAX,CACC,MAAO,GAAK,UAAL,CAAgB,IAAhB,CAAsB,CAAC,IAAvB,CAA8B,6BAA9B,CAAP,CAGD,MAAO,GAAK,iBAAL,CAAuB,CAAI,CAAC,EAA5B,CANmC,CAO1C,CAAO,CAAC,CAAD,CACP,CACD,CA9DD,CARgB,EAuEhB,C,8EAMD;;;;;;;6BAQW,C,CAAI,C,CAAM,C,CAAsB,IAAb,CAAA,CAAa,wDAAN,IAAM,CAC1C,GAAK,KAAK,KAAV,EAIA,GAAI,CAAA,CAAQ,CAAG,CACd,OAAO,CAAE,KADK,CAEd,KAAK,CAAE,CACN,IAAI,CAAJ,CADM,CAEN,OAAO,CAAP,CAFM,CAFO,CAMd,EAAE,CAAF,CANc,CAAf,CASI,CAbJ,GAcC,CAAQ,CAAC,KAAT,CAAe,IAAf,CAAsB,CAdvB,EAiBA,KAAK,IAAL,CAAU,IAAI,CAAC,SAAL,CAAe,CAAf,CAAV,CAjBA,CAkBA,CAED;;;;;wDAMc,C,CAAI,C,CAAQ,CACpB,KAAK,KADe,EAKzB,KAAK,IAAL,CAAU,IAAI,CAAC,SAAL,CAAe,CACxB,OAAO,CAAE,KADe,CAExB,MAAM,CAAN,CAFwB,CAGxB,EAAE,CAAF,CAHwB,CAAf,CAAV,CAKA,CAED;;;;;;0DAOe,C,CAAM,C,CAAS,CAC7B,KAAK,gBAAL,CAAsB,CAAtB,EAA8B,CAC9B,CAED;;;;sEAKqB,C,CAAM,C,CAAS,CACnC,KAAK,qBAAL,CAA2B,CAA3B,EAAmC,CACnC,CAED;;;;;0CAMO,C,CAAQ,C,CAAQ,SACjB,KAAK,KADY,GAKtB,KAAK,IAAL,CAAU,IAAI,CAAC,SAAL,CAAe,CACxB,OAAO,CAAE,KADe,CAExB,MAAM,CAAN,CAFwB,CAGxB,MAAM,CAAN,CAHwB,CAAf,CAAV,CALsB,IAYtB,CAED;;;;;;0CAOO,C,CAAQ,C,CAAQ,C,CAAU,CAChC,GAAI,CAAC,KAAK,KAAV,CACC,SAGoB,UAAjB,QAAO,CAAA,CALqB,GAM/B,CAAQ,CAAG,CANoB,CAO/B,CAAM,OAPyB,EAUhC,GAAI,CAAA,CAAE,CAAG,KAAK,UAAL,EAAT,CAgBA,MAfA,MAAK,IAAL,CAAU,IAAI,CAAC,SAAL,CAAe,CACxB,OAAO,CAAE,KADe,CAExB,MAAM,CAAN,CAFwB,CAGxB,MAAM,CAAN,CAHwB,CAIxB,EAAE,CAAF,CAJwB,CAAf,CAAV,CAeA,CARA,KAAK,iBAAL,CAAuB,CAAvB,EAA6B,SAAC,CAAD,CAAc,OACtC,CAAA,CAAQ,CAAC,KAD6B,CAElC,CAAQ,CAAC,GAAI,CAAA,QAAJ,CAAa,CAAQ,CAAC,KAAT,CAAe,OAA5B,CAAqC,CAAQ,CAAC,KAAT,CAAe,IAApD,CAA0D,CAAQ,CAAC,KAAT,CAAe,IAAzE,CAAD,CAF0B,CAIlC,CAAQ,CAAC,IAAD,CAAO,CAAQ,CAAC,MAAhB,CAEhB,CAED,GACA,C,iCA7HW,CACX,MAAO,MAAK,UAAL,EAAmB,SAAS,CAAC,IACpC,C,qCA5E6B,S,GA0MzB,Q,0BACL;;;;;IAMA,WAAY,CAAZ,CAAqB,CAArB,CAAwC,OAAb,CAAa,wDAAN,IAAM,8CACjC,CADiC,EAEvC,EAAK,IAAL,CAAY,CAF2B,CAGvC,EAAK,IAAL,CAAY,CAH2B,EAIvC,C,6EAXqB,K","file":"JsonRpcWebSocket.min.js","sourcesContent":["/**\n * JSON-RPC 2.0 WebSocket client\n * @author Alex Corn <alex@alexcorn.com>\n */\n\nclass JsonRpcWebSocket extends WebSocket {\n\tconstructor(url) {\n\t\tsuper(url, 'jsonrpc-2.0');\n\n\t\tthis._requestHandlers = {};\n\t\tthis._notificationHandlers = {};\n\t\tthis._responseHandlers = {};\n\t\tthis._nextMsgId = 1;\n\n\t\tthis.addEventListener('message', (e) => {\n\t\t\tif (typeof e.data != 'string') {\n\t\t\t\tthis.close(1003, 'Unacceptable data type');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet data = e.data;\n\t\t\ttry {\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t} catch (ex) {\n\t\t\t\tconsole.error(ex);\n\t\t\t\tthis.close(1007, 'Error parsing JSON');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet isRequest = typeof data.method == 'string';\n\t\t\tlet isResponse = typeof data.id != 'undefined' && (typeof data.result != 'undefined' || typeof data.error == 'object');\n\n\t\t\t// Make sure it's a well-formed JSON-RPC object\n\t\t\tif (data.jsonrpc !== '2.0' || (!isRequest && !isResponse)) {\n\t\t\t\treturn this._sendError(data.id || null, -32600, 'Invalid Request');\n\t\t\t}\n\n\t\t\tif (isRequest) {\n\t\t\t\tif (typeof data.id != 'undefined') {\n\t\t\t\t\t// This is a request\n\t\t\t\t\tlet handler = this._requestHandlers[data.method];\n\t\t\t\t\tif (typeof handler != 'function') {\n\t\t\t\t\t\treturn this._sendError(data.id, -32601, 'Method not found');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Invoke the handler\n\t\t\t\t\thandler(data.params, (err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (err instanceof RpcError) {\n\t\t\t\t\t\t\t\tthis._sendError(data.id, err.code, err.message, err.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._sendResponse(data.id, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// This is a notification\n\t\t\t\t\tlet handler = this._notificationHandlers[data.method];\n\t\t\t\t\tif (typeof handler != 'function') {\n\t\t\t\t\t\treturn this._sendError(null, -32601, 'Method not found');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Invoke the handler. No need to worry about responses or errors.\n\t\t\t\t\thandler(data.params);\n\t\t\t\t}\n\t\t\t} else if (isResponse && data.id !== null) {\n\t\t\t\tlet handler = this._responseHandlers[data.id];\n\t\t\t\tif (typeof handler != 'function') {\n\t\t\t\t\treturn this._sendError(null, -32000, 'Invalid response message ID');\n\t\t\t\t}\n\n\t\t\t\tdelete this._responseHandlers[data.id];\n\t\t\t\thandler(data);\n\t\t\t}\n\t\t});\n\t}\n\n\tget _open() {\n\t\treturn this.readyState == WebSocket.OPEN;\n\t}\n\n\t/**\n\t* Send an error response.\n\t* @param {*} id\n\t* @param {JsonRpcErrorCode|number} code\n\t* @param {string} message\n\t* @param {object|null} data\n\t* @private\n\t*/\n\t_sendError(id, code, message, data = null) {\n\t\tif (!this._open) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet response = {\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode,\n\t\t\t\tmessage\n\t\t\t},\n\t\t\tid\n\t\t};\n\n\t\tif (data) {\n\t\t\tresponse.error.data = data;\n\t\t}\n\n\t\tthis.send(JSON.stringify(response));\n\t}\n\n\t/**\n\t * Send a success response.\n\t * @param {*} id\n\t * @param {*} result\n\t * @private\n\t */\n\t_sendResponse(id, result) {\n\t\tif (!this._open) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.send(JSON.stringify({\n\t\t\tjsonrpc: '2.0',\n\t\t\tresult,\n\t\t\tid\n\t\t}));\n\t}\n\n\t/**\n\t * Register a handler for a method.\n\t * @param {string} name\n\t * @param {function} handler - A function to be invoked when the method is called.\n\t * Called with signature (any params, function respond)\n\t * respond is a function with signature (RpcError|null err, any result)\n\t */\n\tregisterMethod(name, handler) {\n\t\tthis._requestHandlers[name] = handler;\n\t}\n\n\t/**\n\t * Register a handler for an incoming notification. Notifications may not be responded to.\n\t * @param {string} name\n\t * @param {function} handler - Invoked with arguments (any params)\n\t */\n\tregisterNotification(name, handler) {\n\t\tthis._notificationHandlers[name] = handler;\n\t}\n\n\t/**\n\t * Send a notification. A JSON-RPC notification is a message that does not expect a response.\n\t * @param {string} method\n\t * @param {*} [params]\n\t * @returns {boolean} - false if the connection is not open\n\t */\n\tnotify(method, params) {\n\t\tif (!this._open) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.send(JSON.stringify({\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod,\n\t\t\tparams\n\t\t}));\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Invoke a method.\n\t * @param {string} method\n\t * @param {*} [params]\n\t * @param {function} callback - Called with signature (RpcError|null err, any result)\n\t * @returns {boolean} - false if the connection is not open\n\t */\n\tinvoke(method, params, callback) {\n\t\tif (!this._open) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof params == 'function') {\n\t\t\tcallback = params;\n\t\t\tparams = undefined;\n\t\t}\n\n\t\tlet id = this._nextMsgId++;\n\t\tthis.send(JSON.stringify({\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod,\n\t\t\tparams,\n\t\t\tid\n\t\t}));\n\n\t\tthis._responseHandlers[id] = (response) => {\n\t\t\tif (response.error) {\n\t\t\t\treturn callback(new RpcError(response.error.message, response.error.code, response.error.data));\n\t\t\t} else {\n\t\t\t\treturn callback(null, response.result);\n\t\t\t}\n\t\t};\n\n\t\treturn true;\n\t}\n}\n\nclass RpcError extends Error {\n\t/**\n\t *\n\t * @param {string} message\n\t * @param {JsonRpcErrorCode|number} code - MUST be an integer\n\t * @param {object|null} data - Optional data to send along with the error\n\t */\n\tconstructor(message, code, data = null) {\n\t\tsuper(message);\n\t\tthis.code = code;\n\t\tthis.data = data;\n\t}\n}\n"]}
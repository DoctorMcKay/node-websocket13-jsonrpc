"use strict";function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),Object.defineProperty(a,"prototype",{writable:!1}),a}function _inherits(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),Object.defineProperty(a,"prototype",{writable:!1}),b&&_setPrototypeOf(a,b)}function _createSuper(a){var b=_isNativeReflectConstruct();return function(){var c,d=_getPrototypeOf(a);if(b){var e=_getPrototypeOf(this).constructor;c=Reflect.construct(d,arguments,e)}else c=d.apply(this,arguments);return _possibleConstructorReturn(this,c)}}function _possibleConstructorReturn(a,b){if(b&&("object"===_typeof(b)||"function"==typeof b))return b;if(void 0!==b)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(a)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _wrapNativeSuper(a){var b="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(a){function c(){return _construct(a,arguments,_getPrototypeOf(this).constructor)}if(null===a||!_isNativeFunction(a))return a;if("function"!=typeof a)throw new TypeError("Super expression must either be null or a function");if("undefined"!=typeof b){if(b.has(a))return b.get(a);b.set(a,c)}return c.prototype=Object.create(a.prototype,{constructor:{value:c,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(c,a)},_wrapNativeSuper(a)}function _construct(){return _construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(b,c,d){var e=[null];e.push.apply(e,c);var a=Function.bind.apply(b,e),f=new a;return d&&_setPrototypeOf(f,d.prototype),f},_construct.apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(a){return!1}}function _isNativeFunction(a){return-1!==Function.toString.call(a).indexOf("[native code]")}function _setPrototypeOf(a,b){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(a,b){return a.__proto__=b,a},_setPrototypeOf(a,b)}function _getPrototypeOf(a){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(a){return a.__proto__||Object.getPrototypeOf(a)},_getPrototypeOf(a)}/**
 * JSON-RPC 2.0 WebSocket client
 * @author Alex Corn <alex@alexcorn.com>
 */var JsonRpcWebSocket=/*#__PURE__*/function(a){function b(a){var d;return _classCallCheck(this,b),d=c.call(this,a,"jsonrpc-2.0"),d._requestHandlers={},d._notificationHandlers={},d._responseHandlers={},d._nextMsgId=1,d.addEventListener("message",function(a){if("string"!=typeof a.data)return void d.close(1003,"Unacceptable data type");var b=a.data;try{b=JSON.parse(b)}catch(a){return console.error(a),void d.close(1007,"Error parsing JSON")}var c="string"==typeof b.method,e="undefined"!=typeof b.id&&("undefined"!=typeof b.result||"object"==_typeof(b.error));// Make sure it's a well-formed JSON-RPC object
if("2.0"!==b.jsonrpc||!c&&!e)return d._sendError(b.id||null,-32600,"Invalid Request");if(c){if("undefined"!=typeof b.id){// This is a request
var f=d._requestHandlers[b.method];if("function"!=typeof f)return d._sendError(b.id,-32601,"Method not found",{method:b.method});// Invoke the handler
f(b.params,function(a,c){if(!a)d._sendResponse(b.id,c);else if(a instanceof RpcError)d._sendError(b.id,a.code,a.message,a.data);else throw a})}else{// This is a notification
var g=d._notificationHandlers[b.method];if("function"!=typeof g)return d._sendError(null,-32601,"Method not found",{method:b.method});// Invoke the handler. No need to worry about responses or errors.
g(b.params)}}else if(e&&null!==b.id){var h=d._responseHandlers[b.id];if("function"!=typeof h)return d._sendError(null,-32e3,"Invalid response message ID");delete d._responseHandlers[b.id],h(b)}}),d}_inherits(b,a);var c=_createSuper(b);return _createClass(b,[{key:"_open",get:function get(){return this.readyState==WebSocket.OPEN}/**
	* Send an error response.
	* @param {*} id
	* @param {JsonRpcErrorCode|number} code
	* @param {string} message
	* @param {object|null} data
	* @private
	*/},{key:"_sendError",value:function _sendError(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;if(this._open){var e={jsonrpc:"2.0",error:{code:b,message:c},id:a};d&&(e.error.data=d),this.send(JSON.stringify(e))}}/**
	 * Send a success response.
	 * @param {*} id
	 * @param {*} result
	 * @private
	 */},{key:"_sendResponse",value:function _sendResponse(a,b){this._open&&this.send(JSON.stringify({jsonrpc:"2.0",result:b,id:a}))}/**
	 * Register a handler for a method.
	 * @param {string} name
	 * @param {function} handler - A function to be invoked when the method is called.
	 * Called with signature (any params, function respond)
	 * respond is a function with signature (RpcError|null err, any result)
	 */},{key:"registerMethod",value:function registerMethod(a,b){this._requestHandlers[a]=b}/**
	 * Register a handler for an incoming notification. Notifications may not be responded to.
	 * @param {string} name
	 * @param {function} handler - Invoked with arguments (any params)
	 */},{key:"registerNotification",value:function registerNotification(a,b){this._notificationHandlers[a]=b}/**
	 * Send a notification. A JSON-RPC notification is a message that does not expect a response.
	 * @param {string} method
	 * @param {*} [params]
	 * @returns {boolean} - false if the connection is not open
	 */},{key:"notify",value:function notify(a,b){return!!this._open&&(this.send(JSON.stringify({jsonrpc:"2.0",method:a,params:b})),!0)}/**
	 * Invoke a method.
	 * @param {string} method
	 * @param {*} [params]
	 * @param {function} callback - Called with signature (RpcError|null err, any result)
	 * @returns {boolean} - false if the connection is not open
	 */},{key:"invoke",value:function invoke(a,b,c){if(!this._open)return!1;"function"==typeof b&&(c=b,b=void 0);var d=this._nextMsgId++;return this.send(JSON.stringify({jsonrpc:"2.0",method:a,params:b,id:d})),this._responseHandlers[d]=function(a){return a.error?c(new RpcError(a.error.message,a.error.code,a.error.data)):c(null,a.result)},!0}}]),b}(/*#__PURE__*/_wrapNativeSuper(WebSocket)),RpcError=/*#__PURE__*/function(a){/**
	 *
	 * @param {string} message
	 * @param {JsonRpcErrorCode|number} code - MUST be an integer
	 * @param {object|null} data - Optional data to send along with the error
	 */function b(a,d){var e,f=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return _classCallCheck(this,b),e=c.call(this,a),e.code=d,e.data=f,e}_inherits(b,a);var c=_createSuper(b);return _createClass(b)}(/*#__PURE__*/_wrapNativeSuper(Error));

//# sourceMappingURL=JsonRpcWebSocket.min.js.map